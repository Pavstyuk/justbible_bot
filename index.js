// Just Bible Bot 
// Version 1.2.1

require('dotenv').config();
const fs = require('node:fs');

const {
    Bot,
    GrammyError,
    HttpError,
    InputFile,
    InlineKeyboard,
} = require('grammy');



const bot = new Bot(process.env.BOT_API_KEY);

/* BIBLE DATA */
const titlesArr = ["–ë—ã—Ç–∏–µ, –ë—Ç.", "–ò—Å—Ö–æ–¥, –ò–¥.", "–õ–µ–≤–∏—Ç, –õ–µ–≤–∏—Ç–∞, –õ–≤.", "–ß–∏—Å–ª–∞, –ß—Å.", "–í—Ç–æ—Ä–æ–∑–∞–∫–æ–Ω–∏–µ, –í—Ç.", "–ò–∏—Å—É—Å –ù–∞–≤–∏–Ω, –ò–∏—Å—É—Å–∞ –ù–∞–≤–∏–Ω–∞, –ù–≤.", "–°—É–¥—å–∏, –°—É–¥–µ–π, –°–¥.", "–†—É—Ñ—å,–†—É—Ñ–∏,–†—Ñ,", "1 –¶–∞—Ä—Å—Ç–≤, 1–¶–∞—Ä—Å—Ç–≤, 1–¶–∞—Ä, 1–¶.", "2 –¶–∞—Ä—Å—Ç–≤, 2–¶–∞—Ä—Å—Ç–≤, 2–¶–∞—Ä, 2–¶.", "3 –¶–∞—Ä—Å—Ç–≤, 3–¶–∞—Ä—Å—Ç–≤, 3–¶–∞—Ä, 3–¶.", "4 –¶–∞—Ä—Å—Ç–≤, 4–¶–∞—Ä—Å—Ç–≤, 4–¶–∞—Ä, 4–¶.", "1 –ü–∞—Ä–∞–ª–∏–ø–æ–º–µ–Ω–æ–Ω, 1–ü–∞—Ä, 1–ü., 1 –õ–µ—Ç–æ–ø–∏—Å—å, 1–õ–µ—Ç", "2 –ü–∞—Ä–∞–ª–∏–ø–æ–º–µ–Ω–æ–Ω, 2–ü–∞—Ä, 2–ü., 2 –õ–µ—Ç–æ–ø–∏—Å—å, 2–õ–µ—Ç", "–ï–∑–¥—Ä–∞, –ï–∑–¥—Ä—É, –ï–∑–¥—Ä—ã, –ï–∑–¥.,–ï–∑.", "–ù–µ–µ–º–∏—è,–ù–µ–µ–º–∏—é,–ù–µ–µ–º–∏–∏,–ù–º.", "–ï—Å—Ñ–∏—Ä—å, –≠—Å—Ñ–∏—Ä—å, –ï—Å—Ñ–∏—Ä–∏, –≠—Å—Ñ–∏—Ä–∏, –ï—Å., –≠—Å.", "–ò–æ–≤, –ò–æ–≤–∞, –ò–≤.", "–ü—Å–∞–ª—Ç–∏—Ä—å, –ü—Å–∞–ª—Ç—ã—Ä—å, –ü—Å–∞–ª–æ–º, –ü—Å–∞–ª–º—ã, –ü—Å–∞–ª–º–æ–≤, –ü—Å.", "–ü—Ä–∏—Ç—á–∏, –ü—Ä–∏—Ç—á–µ–π, –ü—Ä.", "–ï–∫–∫–ª–µ—Å–∏–∞—Å—Ç, –ï–∫–∫–ª–µ–∑–∏–∞—Å—Ç, –ï–∫.", "–ü–µ—Å–Ω—è –ü–µ—Å–Ω–µ–π, –ü–µ—Å–Ω–∏ –ü–µ—Å–Ω–µ–π, –ü–µ—Å–Ω—é –ü–µ—Å–Ω–µ–π, –ü–µ—Å–Ω.,–ü–Ω.", "–ò—Å–∞–∏—è, –ò—Å–∞–π—è, –ò—Å–∞–∏—é,  –ò—Å–∞–∏, –ò—Å.", "–ò–µ—Ä–µ–º–∏—è, –ò–µ—Ä–µ–º–∏–∏, –ò–µ—Ä–µ–º–∏—é, –ò—Ä.", "–ü–ª–∞—á –ò–µ—Ä–µ–º–∏–∏, –ü–ª.", "–ò–µ–∑–µ–∫–∏–∏–ª—å, –ò–µ–∑–µ–∫–∏–∏–ª—è, –ò–∑.", "–î–∞–Ω–∏–∏–ª, –î–∞–Ω–∏–∏–ª–∞, –î–Ω.", "–û—Å–∏—è, –û—Å–∏–∏, –û—Å–∏—é, –û—Å.", "–ò–æ–∏–ª—å, –ò–æ–∏–ª—è, –ò–ª.", "–ê–º–æ—Å, –ê–º–æ—Å–∞, –ê–º.", "–ê–≤–¥–∏–π, –ê–≤–¥–∏—è, –ê–≤–¥–∏—é, –ê–∏.", "–ò–æ–Ω–∞, –ò–æ–Ω—ã, –ò–æ–∞–Ω—É, –ò–æ.", "–ú–∏—Ö–µ–π, –ú–∏—Ö–µ—è, –ú—Ö.", "–ù–∞—É–º, –ù–∞—É–º–∞, –ù–∞.", "–ê–≤–≤–∞–∫—É–º, –ê–≤–≤–∞–∫—É–º–∞, –ê–≤.", "–°–æ—Ñ–æ–Ω–∏—è, –°–æ—Ñ–æ–Ω–∏–∏, –°–æ—Ñ–æ–Ω–∏—é, –°—Ñ.", "–ê–≥–≥–µ–π, –ê–≥–≥–µ—è, –ê–≥–≥–µ—é, –ê–≥.", "–ó–∞—Ö–∞—Ä–∏—è, –ó–∞—Ö–∞—Ä–∏–∏, –ó–∞—Ö–∞—Ä–∏—é, –ó—Ä.", "–ú–∞–ª–∞—Ö–∏—è, –ú–∞–ª–∞—Ö–∏–∏, –ú–∞–ª–∞—Ö–∏—é, –ú–ª.", "–æ—Ç –ú–∞—Ç—Ñ–µ—è, –ú–∞—Ç—Ñ–µ–π, –ú–∞—Ç—Ñ–µ—è, –ú–∞—Ç–≤–µ–π, –ú—Ç., –ú—Ñ.", "–æ—Ç –ú–∞—Ä–∫–∞, –ú–∞—Ä–∫, –ú–∞—Ä–∫–∞, –ú–∫., –ú—Ä.", "–æ—Ç –õ—É–∫–∏, –õ—É–∫–∞, –õ—É–∫–∏, –õ–∫.", "–æ—Ç –ò–æ–∞–Ω–Ω–∞, –ò–æ–∞–Ω–Ω, –ò–æ–∞–Ω–Ω–∞, –ò–Ω.", "–î–µ—è–Ω–∏—è, –î–µ.", "–ò–∞–∫–æ–≤, –ò–∞–∫–æ–≤–∞, –ò–∫.", "1 –ü–µ—Ç—Ä–∞, 1–ü–µ—Ç—Ä–∞, 1–ü.", "2 –ü–µ—Ç—Ä–∞, 2–ü–µ—Ç—Ä–∞, 2–ü", "1 –ò–æ–∞–Ω–Ω–∞, 1–ò–æ–∞–Ω–Ω–∞, 1 –ò–Ω, 1–ò–Ω., 1-–µ –ò–æ–∞–Ω, 1–ò.", "2 –ò–æ–∞–Ω–Ω–∞, 2–ò–æ–∞–Ω–Ω–∞, 2 –ò–Ω, 2–ò–Ω., 2-–µ –ò–æ–∞–Ω, 2–ò.", "3 –ò–æ–∞–Ω–Ω–∞, 3–ò–æ–∞–Ω–Ω–∞, 3 –ò–Ω, 3–ò–Ω., 3-–µ –ò–æ–∞–Ω, 3–ò.", "–ò—É–¥–∞, –ò—É–¥—ã, –ò—É–¥—É, –ò—É.", "–†–∏–º–ª—è–Ω–∞–º, –†–∏–º., –†–º.", "1 –ö–æ—Ä–∏–Ω—Ñ—è–Ω–∞–º, 1–ö–æ—Ä–∏–Ω—Ñ—è–Ω–∞–º, 1–ö–æ—Ä., 1–ö., 1-–µ –ö–æ—Ä–∏–Ω—Ñ—è–Ω–∞–º", "2 –ö–æ—Ä–∏–Ω—Ñ—è–Ω–∞–º, 2–ö–æ—Ä–∏–Ω—Ñ—è–Ω–∞–º, 2–ö–æ—Ä., 2–ö., 2-–µ –ö–æ—Ä–∏–Ω—Ñ—è–Ω–∞–º", "–ì–∞–ª–∞—Ç–∞–º, –ì–ª.", "–ï—Ñ–µ—Å—è–Ω–∞–º, –≠—Ñ–µ—Å—è–Ω–∞–º, –ï—Ñ., –≠—Ñ.", "–§–∏–ª–∏–ø–ø–∏–π—Ü–∞–º, –§–ª–ø, –§–ª.", "–ö–æ–ª–æ—Å—Å—è–Ω–∞–º, –ö–ª.", "1 –§–µ—Å—Å–∞–ª–æ–Ω–∏–∫–∏–π—Ü–∞–º, 1–§–µ—Å—Å–∞–ª–æ–Ω–∏–∫–∏–π—Ü–∞–º, 1-–µ –§–µ—Å, 1-–µ –§–µ—Å., 1–§.", "2 –§–µ—Å—Å–∞–ª–æ–Ω–∏–∫–∏–π—Ü–∞–º, 2–§–µ—Å—Å–∞–ª–æ–Ω–∏–∫–∏–π—Ü–∞–º, 2-–µ –§–µ—Å, 2-–µ –§–µ—Å., 2–§.", "1 –¢–∏–º–æ—Ñ–µ—é, 1–¢–∏–º–æ—Ñ–µ—é, 1-–µ –¢–∏–º., 1–¢–∏–º., 1–¢.", "2 –¢–∏–º–æ—Ñ–µ—é, 2–¢–∏–º–æ—Ñ–µ—é, 2-–µ –¢–∏–º., 2–¢–∏–º., 2–¢.", "–¢–∏—Ç—É, –¢–∏—Ç., –¢–∏.", "–§–∏–ª–∏–º–æ–Ω—É, –§–ª–º., –§–º.", "–ï–≤—Ä–µ—è–º, –ï–≤—Ä., –ï—Ä.", "–û—Ç–∫—Ä–æ–≤–µ–Ω–∏–µ, –û—Ç–∫—Ä., –û–∏., –ê–ø–æ–∫–∞–ª–∏–ø—Å–∏—Å, –ê–ø–æ–∫."];
const books = ["–ë—ã—Ç–∏–µ", "–ò—Å—Ö–æ–¥", "–õ–µ–≤–∏—Ç", "–ß–∏—Å–ª–∞", "–í—Ç–æ—Ä–æ–∑–∞–∫–æ–Ω–∏–µ", "–ò–∏—Å—É—Å –ù–∞–≤–∏–Ω", "–°—É–¥—å–∏", "–†—É—Ñ—å", "1 –¶–∞—Ä—Å—Ç–≤", "2 –¶–∞—Ä—Å—Ç–≤", "3 –¶–∞—Ä—Å—Ç–≤", "4 –¶–∞—Ä—Å—Ç–≤", "1 –ü–∞—Ä–∞–ª–∏–ø–æ–º–µ–Ω–æ–Ω", "2 –ü–∞—Ä–∞–ª–∏–ø–æ–º–µ–Ω–æ–Ω", "–ï–∑–¥—Ä–∞", "–ù–µ–µ–º–∏—è", "–ï—Å—Ñ–∏—Ä—å", "–ò–æ–≤", "–ü—Å–∞–ª—Ç–∏—Ä—å", "–ü—Ä–∏—Ç—á–∏", "–ï–∫–∫–ª–µ—Å–∏–∞—Å—Ç", "–ü–µ—Å–Ω—è –ü–µ—Å–Ω–µ–π", "–ò—Å–∞–∏—è", "–ò–µ—Ä–µ–º–∏—è", "–ü–ª–∞—á –ò–µ—Ä–µ–º–∏–∏", "–ò–µ–∑–µ–∫–∏–∏–ª—å", "–î–∞–Ω–∏–∏–ª", "–û—Å–∏—è", "–ò–æ–∏–ª—å", "–ê–º–æ—Å", "–ê–≤–¥–∏–π", "–ò–æ–Ω–∞", "–ú–∏—Ö–µ–π", "–ù–∞—É–º", "–ê–≤–≤–∞–∫—É–º", "–°–æ—Ñ–æ–Ω–∏—è", "–ê–≥–≥–µ–π", "–ó–∞—Ö–∞—Ä–∏—è", "–ú–∞–ª–∞—Ö–∏—è", "–ú–∞—Ç—Ñ–µ–π", "–ú–∞—Ä–∫", "–õ—É–∫–∞", "–ò–æ–∞–Ω–Ω", "–î–µ—è–Ω–∏—è", "–ò–∞–∫–æ–≤", "1 –ü–µ—Ç—Ä–∞", "2 –ü–µ—Ç—Ä–∞", "1 –ò–æ–∞–Ω–Ω–∞", "2 –ò–æ–∞–Ω–Ω–∞", "3 –ò–æ–∞–Ω–Ω–∞", "–ò—É–¥–∞", "–†–∏–º–ª—è–Ω–∞–º", "1 –ö–æ—Ä–∏–Ω—Ñ—è–Ω–∞–º", "2 –ö–æ—Ä–∏–Ω—Ñ—è–Ω–∞–º", "–ì–∞–ª–∞—Ç–∞–º", "–ï—Ñ–µ—Å—è–Ω–∞–º", "–§–∏–ª–∏–ø–ø–∏–π—Ü–∞–º", "–ö–æ–ª–æ—Å—Å—è–Ω–∞–º", "1 –§–µ—Å—Å–∞–ª–æ–Ω–∏–∫–∏–π—Ü–∞–º", "2 –§–µ—Å—Å–∞–ª–æ–Ω–∏–∫–∏–π—Ü–∞–º", "1 –¢–∏–º–æ—Ñ–µ—é", "2 –¢–∏–º–æ—Ñ–µ—é", "–¢–∏—Ç—É", "–§–∏–ª–∏–º–æ–Ω—É", "–ï–≤—Ä–µ—è–º", "–û—Ç–∫—Ä–æ–≤–µ–Ω–∏–µ"];
const chaptersArr = [50, 40, 27, 36, 34, 24, 21, 4, 31, 24, 22, 25, 29, 36, 10, 13, 10, 42, 150, 31, 12, 8, 66, 52, 5, 48, 12, 14, 3, 9, 1, 4, 7, 3, 3, 3, 2, 14, 4, 28, 16, 24, 21, 28, 5, 5, 3, 5, 1, 1, 1, 16, 16, 13, 6, 6, 4, 4, 5, 3, 6, 4, 3, 1, 13, 22];
let theBibleRBO;

const writeLogFile = (ctx, cmd) => {
    let d = new Date();
    let now = new Intl.DateTimeFormat('ru-RU', {
        dateStyle: "short",
        timeStyle: "short"
    }).format(d);
    let content = `date: "${now}", message: "${ctx.message.text}", event: "${cmd}"; \r\n`;
    console.log(content);

    fs.appendFile("./bot.log", content, err => {
        if (err) {
            console.log(err);
        } else {
            console.log("Log –∑–∞–ø–∏—Å–∞–Ω.");
        }
    })
}

// –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –ë–∏–±–ª–∏–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥

fetch("https://justbible.ru/json/rbo.json")
    .then((response) => {
        return response.json();
    })
    .then((rbo) => {
        theBibleRBO = rbo;
    });

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –æ—Ç—Ä—ã–≤–∫–∞

const getRandomVerse = () => {
    const getRandomNumber = (min, max) => {
        return (Math.random() * (max - min) + min).toFixed(0);
    }
    let rnd = getRandomNumber(0, theBibleRBO.length);
    console.log(rnd);
    if (theBibleRBO[rnd].text != "") {
        let randomVerse = `${theBibleRBO[rnd].text} \r\n\r\n(${theBibleRBO[rnd].book} ${theBibleRBO[rnd].chapter}:${theBibleRBO[rnd].verse})`;
        let linkToVerse = `https://justbible.ru/?trans=rbo&book=${theBibleRBO[rnd].book}&chapter=${theBibleRBO[rnd].chapter}&verse=${theBibleRBO[rnd].verse}`;

        return `<blockquote><i>${randomVerse}</i></blockquote> <a href="${linkToVerse}">–ß–∏—Ç–∞—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ...</a>`;

    } else {
        getRandomVerse();
    }
}

// –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê

bot.command('start', async (ctx) => {
    await ctx.react("üòç")
    await ctx.reply("<b>–ü—Ä–∏–≤–µ—Ç, —è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ü—Ä–æ—Å—Ç–æ –ë–∏–±–ª–∏—è</b> \r\n\r\n–£–º–µ—é —á–µ—Ç—ã—Ä–µ —Ñ—É–Ω–∫—Ü–∏–∏: \n\r\r\n1. –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –æ—Ç—Ä—ã–≤–∫–∏ –∏–∑ –ë–∏–±–ª–∏–∏, –∫–æ–º–∞–Ω–¥–∞: /random \r\n\r\n2. –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—Ç—Ä—ã–≤–æ–∫ –∏–∑ –ë–∏–±–ª–∏–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º. –ù–∞–ø—Ä–∏–º–µ—Ä: <i>1 –§–µ—Å—Å 5:18</i> \r\n\r\n3. –í—ã—Å—ã–ª–∞—Ç—å –∞—É–¥–∏–æ –∑–∞–ø–∏—Å–∏ –ë–∏–±–ª–∏–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–µ –∏ –≥–ª–∞–≤–µ. –ù–∞–ø—Ä–∏–º–µ—Ä: <i>–°–ª—É—à–∞—Ç—å –ü—Å–∞–ª–æ–º 1</i> \r\n\r\n 4. –ò—Å–∫–∞—Ç—å —Ñ—Ä–∞–∑—É –≤ —Ç–µ–∫—Å—Ç–µ –ë–∏–±–ª–∏–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: <i>–õ—é–±–æ–≤—å —Ç–µ—Ä–ø–µ–ª–∏–≤–∞</i> –∏–ª–∏ <i>–ò—Å–∫–∞—Ç—å –ª—é–±–æ–≤—å —Ç–µ—Ä–ø–µ–ª–∏–≤–∞</i>", {
        parse_mode: "HTML"
    });
});

bot.command('random', async (ctx) => {
    await ctx.react("ü§©");
    await ctx.reply(getRandomVerse(), {
        parse_mode: "HTML",
        disable_web_page_preview: true
    });
    writeLogFile(ctx, "random");
});

bot.command('help', async (ctx) => {
    writeLogFile(ctx, "help");
    await ctx.react("ü§ì");
    let key = new InlineKeyboard().url('justbible.ru', 'https://justbible.ru/');
    await ctx.reply('<b>–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –ü—Ä–æ—Å—Ç–æ –ë–∏–±–ª–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –†—É—Å—Å–∫–∏–π –ü–µ—Ä–µ–≤–æ–¥, –†–ë–û, 2015.</b> \r\n\r\n    <b>1. –ö–∞–∫ —á–∏—Ç–∞—Ç—å?</b>\r\n    –ù–∞–ø–∏—à–∏—Ç–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç—Ä—ã–≤–∫–∞ –∏–∑ –ë–∏–±–ª–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <i>–ò–æ–∞–Ω–Ω 1:1</i> –∏ –±–æ—Ç –≤—ã–¥–∞—Å—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å—Ç–∏—Ö: –ï–≤–∞–Ω–≥–µ–ª–∏–µ –æ—Ç –ò–æ–∞–Ω–Ω–∞, –≥–ª–∞–≤–∞ 1, —Å—Ç–∏—Ö 1. –î–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –≥–ª–∞–≤—ã –∏ —Å—Ç–∏—Ö–∞ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —Å–∏–º–≤–æ–ª –¥–≤–æ–µ—Ç–æ—á–∏–µ –∏–ª–∏ —Ç–æ—á–∫–∞. \r\n\r\n    –ß—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ –æ—Ç—Ä—ã–≤–æ–∫ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç–∏—Ö–æ–≤ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –≤–∏–¥–µ: <i>1 –ö–æ—Ä 13:4-8</i>. \r\n\r\n    –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—Ç–∏—Ö–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: <i>–ò–æ–∞–Ω–Ω 1:1,14</i>. \r\n\r\n    –î–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏ –¥–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –±—É–∫–≤, –≤–º–µ—Å—Ç–æ <i>1 –ö–æ—Ä–∏–Ω—Ñ—è–Ω–∞–º</i> –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å <i>1 –ö–æ—Ä</i> –∏–ª–∏ <i>1–ö–æ—Ä</i> –∏–ª–∏ –¥–∞–∂–µ <i>1–ö</i>, –∞ –≤–º–µ—Å—Ç–æ <i>–û—Ç–∫—Ä–æ–≤–µ–Ω–∏–µ</i> - <i>–û—Ç–∫—Ä</i> –∏–ª–∏ <i>–û—Ç–∫</i> \r\n\r\n    <b>2. –ö–∞–∫ —Å–ª—É—à–∞—Ç—å?</b>\r\n    –ß—Ç–æ–±—ã –±–æ—Ç –≤—ã—Å–ª–∞–ª –∞—É–¥–∏–æ –∑–∞–ø–∏—Å—å –≥–ª–∞–≤—ã –∏–∑ –ë–∏–±–ª–∏–∏, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–æ–≤–∞ <i>"–°–ª—É—à–∞—Ç—å"</i> (–¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è: <i>"–ó–∞–ø–∏—Å—å", "–ê—É–¥–∏–æ", "–ó–≤—É–∫"</i>), –∑–∞—Ç–µ–º —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –∏ –Ω–æ–º–µ—Ä –≥–ª–∞–≤—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä —Ç–∞–∫: <i>"–°–ª—É—à–∞—Ç—å –ü—Ä–∏—Ç—á–∏ 1"</i>. \r\n\r\n    <b>3. –ö–∞–∫ –∏—Å–∫–∞—Ç—å?</b>\r\n    –ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—É—é —Ñ—Ä–∞–∑—É –≤ —Ç–µ–∫—Å—Ç–µ –ë–∏–±–ª–∏–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —ç—Ç—É —Ñ—Ä–∞–∑—É –∏–ª–∏ —Å–ª–æ–≤–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä <i>"–í—Å–µ–≥–¥–∞ —Ä–∞–¥—É–π—Ç–µ—Å—å"</i> –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ "–ò—Å–∫–∞—Ç—å" (–¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è: <i>"–ü–æ–∏—Å–∫", "–ù–∞–π—Ç–∏"</i>) <i>"–ò—Å–∫–∞—Ç—å –í—Å–µ–≥–¥–∞ —Ä–∞–¥—É–π—Ç–µ—Å—å"</i>\r\n\r\n    –ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ü—Ä–æ—Å—Ç–æ –ë–∏–±–ª–∏—è –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø–æ –∞–¥—Ä–µ—Å—É <a href="https://justbible.ru">justbible.ru</a>\r\n\r\n    –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ @pavstyuk', {
        parse_mode: "HTML",
        disable_web_page_preview: true,
        reply_markup: key,
    });
});

// –ú–ï–ù–Æ –ë–û–¢–ê

bot.api.setMyCommands([{
    command: "start",
    description: "–ó–∞–ø—É—Å–∫–∞–µ–º —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞"
},
{
    command: "random",
    description: "–ë–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç—Ä—ã–≤–æ–∫ –∏–∑ –ë–∏–±–ª–∏–∏"
},
{
    command: "help",
    description: "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º?"
}
]);

bot.hears([/–ò—Å–∫–∞—Ç—å/, /–∏—Å–∫–∞—Ç—å/, /–ü–æ–∏—Å–∫/, /–ø–æ–∏—Å–∫/, /–ù–∞–π—Ç–∏/, /–Ω–∞–π—Ç–∏/], async (ctx) => {
    searching(ctx);
});

bot.hears([/–°–ª—É—à–∞—Ç—å/, /–°–ª—ã—à–∞—Ç—å/, /—Å–ª—É—à–∞—Ç—å/, /—Å–ª—ã—à–∞—Ç—å/, /—Å–ª—ã—à/, /—Å–ª—É—à/, /C–ª—ã—à/, /C–ª—É—à/, /–ê—É–¥–∏–æ/, /–∞—É–¥–∏–æ/, /–∑–∞–ø–∏—Å—å/, /–∑–≤—É–∫/], async (ctx) => {
    let wholeText = ctx.message.text;
    let wholeTextArr = wholeText.split(" ");
    if (wholeTextArr.length >= 4) {
        await ctx.reply('–ù–∞–ø–∏—à—Ç–µ –ø—Ä–æ—â–µ –Ω–∞–ø—Ä–∏–º–µ—Ä —Ç–∞–∫: <i>"–°–ª—É—à–∞—Ç—å –ò—Å–∞–π—è 53"</i>', {
            parse_mode: "HTML"
        });
        return;
    }
    let foundBook = titlesArr.find((title) => {
        return title.toLowerCase().includes(wholeTextArr[1].toLowerCase());
    });
    // console.log(foundBook)
    let bookIndex = titlesArr.indexOf(foundBook);
    let bookToListen = books[bookIndex];

    if (bookToListen) {
        if (Number(wholeTextArr[2]) != NaN && Number(wholeTextArr[2]) > 0 && Number(wholeTextArr[2]) <= chaptersArr[bookIndex]) {
            let chapterToListen = Number(wholeTextArr[2]);
            await ctx.reply(`–í—ã—Å—ã–ª–∞—é –∑–∞–ø–∏—Å—å: ${bookToListen} –≥–ª–∞–≤–∞ ${chapterToListen}`);
            let c, b;

            if (bookIndex < 10) {
                b = `0${bookIndex + 1}`
            } else {
                b = bookIndex + 1;
            }

            if (b === 19) {
                if (chapterToListen < 10) {
                    c = `00${chapterToListen}`;
                } else if (chapterToListen < 100) {
                    c = `0${chapterToListen}`;
                } else {
                    c = chapterToListen;
                }
            } else {
                if (chapterToListen < 10) {
                    c = `0${chapterToListen}`;
                } else {
                    c = chapterToListen;
                }
            }
            let audioFile = new InputFile(`audio/${b}/${c}.mp3`);
            console.log(audioFile);
            await ctx.replyWithAudio(audioFile, {
                title: `–ì–ª–∞–≤–∞ ${chapterToListen}`
            });
        } else {
            await ctx.reply(`–£—Ç–æ—á–Ω–∏—Ç–µ –Ω–æ–º–µ—Ä –≥–ª–∞–≤—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.`, {
                parse_mode: "HTML"
            });
            return;
        }
    } else {
        await ctx.reply(`–ù–µ –Ω–∞—à–µ–ª –∫–Ω–∏–≥—É: <i>"${wholeTextArr[1]}"</i>`, {
            parse_mode: "HTML"
        });
        return;
    }
});


bot.on("message:text", async (ctx) => {

    console.log(ctx.from);
    writeLogFile(ctx, "read");

    let messageArr = ctx.message.text.split(' ');
    let book;
    let chapter;
    let ver;
    let text;

    const showErrorVerse = async (verse) => {
        await ctx.reply(`<b>${verse}</b> - –Ω–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã`, {
            parse_mode: "HTML"
        });
    }

    const getChapter = (book, coords) => {
        let coordChapter;
        let coordVerse;
        if (coords.includes(':')) {
            coordChapter = Number(coords.split(':')[0]);
            coordVerse = coords.split(':')[1];
        } else if (coords.includes('.')) {
            coordChapter = Number(coords.split('.')[0]);
            coordVerse = coords.split('.')[1];
        } else {
            coordChapter = Number(coords);
            coordVerse = 0;
        }
        console.log(`coords: ${coords}`)

        let bookIndex = books.indexOf(book);
        if (coordChapter > 0 && coordChapter <= chaptersArr[bookIndex]) {
            ver = coordVerse;
            return Number(coordChapter);
        } else {
            ver = false;
            return false;
        }
    }

    const checkVers = (vers) => {
        console.log(`checking vers: ${vers}`);
        if (vers.length > 1) {
            if (vers.includes("-")) {
                let versArr = vers.split("-");
                let delta = Number(versArr[1]) - Number(versArr[0]);
                if (delta > 0) {
                    let versDelta = []
                    for (let i = 0; i <= delta; i++) {
                        versDelta.push(Number(versArr[0]) + i);
                    }
                    console.log(`versDelta: ${versDelta}`);
                    return versDelta;
                } else {
                    return false;
                }

            } else if (vers.includes(",")) {
                let versArr = vers.split(",");
                versArr.sort((a, b) => {
                    return +a - +b;
                });
                return versArr.map(Number);
            } else {
                return Number(vers);
            }
        } else {
            return Number(vers);
        }
    }

    const checkBook = () => {
        if (messageArr[0].match(/^[0-9]+$/) != null) {
            if (messageArr[0].length === 1) {

                let queryBook = `${messageArr[0]} ${messageArr[1]}`;

                let foundBook = titlesArr.find((title) => {
                    return title.toLowerCase().includes(queryBook.toLowerCase());
                });

                console.log(foundBook)

                book = books[titlesArr.indexOf(foundBook)];

                if (book && messageArr[2]) {
                    chapter = getChapter(book, messageArr[2]);
                } else {
                    chapter = false;
                }

            } else {
                book = false;
            }

        } else if (messageArr[0].toLowerCase() == '–æ—Ç') {
            let queryBook = `${messageArr[0]} ${messageArr[1]}`;
            console.log(`queryBook = ${queryBook}`)
            let foundBook = titlesArr.find((title) => {
                return title.toLowerCase().includes(queryBook.toLowerCase());
            });
            console.log(foundBook)
            book = books[titlesArr.indexOf(foundBook)];

            if (book && messageArr[2]) {
                chapter = getChapter(book, messageArr[2]);
            } else {
                chapter = false;
            }

        } else {
            let queryBook = messageArr[0];
            let foundBook = titlesArr.find((title) => {
                return title.toLowerCase().includes(queryBook.toLowerCase());
            });
            console.log(foundBook)
            book = books[titlesArr.indexOf(foundBook)];

            if (book && messageArr[1]) {
                chapter = getChapter(book, messageArr[1]);
            } else {
                chapter = false;
            }
        }

        if (book && chapter) {
            text = "";
            if (ver === 0) {
                theBibleRBO.forEach(item => {
                    if (item.book == book && Number(item.chapter) === chapter) {
                        text += `${item.verse}. ${item.text} \r\n`;
                    }
                });
                text += `\r\n(${book} ${chapter})`;
            } else {

                ver = checkVers(ver);
                if (typeof ver === "number") {
                    console.log(`–ö–Ω–∏–≥–∞: ${book}, –ì–ª–∞–≤–∞: ${chapter}, –°—Ç–∏—Ö: ${ver}`);
                    theBibleRBO.forEach(item => {
                        if (item.book == book && Number(item.chapter) === chapter && Number(item.verse) === ver) {
                            if (item.text != "") {
                                text = `${item.text}\r\n\r\n(${item.book} ${item.chapter}:${item.verse})`;
                            } else {
                                text = `<code>–í —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –ø–µ—Ä–µ–≤–æ–¥–µ —Å—Ç–∏—Ö <b>${item.book} ${item.chapter}:${item.verse}</b> –∏–º–µ–µ—Ç –¥—Ä—É–≥–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.</code>`;
                            }
                        }
                    });
                } else if (typeof ver === "object") {

                    console.log(`–ö–Ω–∏–≥–∞: ${book}, –ì–ª–∞–≤–∞: ${chapter}, –°—Ç–∏—Ö: ${ver}`);
                    console.log(ver);
                    text = "";
                    theBibleRBO.forEach(item => {
                        if (item.book == book && Number(item.chapter) === chapter && ver.includes(Number(item.verse))) {
                            if (item.text != "") {
                                text += `${item.verse}. ${item.text}\r\n`;
                            } else {
                                text += `${item.verse}. --\r\n`;
                            }
                        }
                    });

                    if (ver[ver.length - 1] - ver[0] === ver.length - 1) {
                        text += `\r\n(${book} ${chapter}:${ver[0]}-${ver[ver.length - 1]})`;
                    } else {
                        text += `\r\n(${book} ${chapter}:${ver})`;
                    }

                } else {
                    text = false;
                }
                console.log(`–¢–µ–∫—Å—Ç: ${text}`);
            }
        }
    }

    checkBook();

    if (book && chapter && text) {

        if (text.includes("<code>")) {
            await ctx.react("ü§î");
            await ctx.reply(`${text}`, {
                parse_mode: "HTML"
            });
            return;
        }

        if (text.length < 4096) {
            await ctx.react("üëç");
            await ctx.reply(`<blockquote><em>${text}</em></blockquote>`, {
                parse_mode: "HTML"
            });
        } else {
            await ctx.react("üëÄ");
            await ctx.reply(`–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è –≥–ª–∞–≤–∞ <b>${book}: ${chapter}</b>. \r\n–£—Ç–æ—á–Ω–∏—Ç–µ  –∑–∞–ø—Ä–æ—Å.`, {
                parse_mode: "HTML"
            });
        }
    } else if (book && chapter) {
        await ctx.react("üëÄ");
        await ctx.reply(`–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Å—Ç–∏—Ö –≤ –≥–ª–∞–≤–µ ${chapter} –∏–∑ –∫–Ω–∏–≥–∏ ${book}`);
    } else if (book) {
        await ctx.react("üëÄ");
        await ctx.reply(`–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—É—é –≥–ª–∞–≤—É –≤ –∫–Ω–∏–≥–µ ${book}`);
    } else {
        // showErrorVerse(ctx.message.text);
        searching(ctx);
    }

});


const searching = async (ctx) => {
    let results;
    let text = ctx.message.text;
    let textArr = text.split(" ");

    const queryArr = ["–ò—Å–∫–∞—Ç—å", "–∏—Å–∫–∞—Ç—å", "–ü–æ–∏—Å–∫", "–ø–æ–∏—Å–∫", "–ù–∞–π—Ç–∏", "–Ω–∞–π—Ç–∏"];

    if (queryArr.includes(textArr[0])) {
        textArr.shift();
        text = textArr.join(" ");
    }

    console.log(`Searching text: ${text}`);
    writeLogFile(ctx, "search");

    const startSearching = (words) => {
        results = [];
        theBibleRBO.forEach(item => {
            if (item.text.toLowerCase().includes(words.toLowerCase())) {
                results.push(item);
            }
        });

        return results;
    }


    if (text.length >= 3) {
        results = startSearching(text);
    } else {
        await ctx.react("ü§î");
        await ctx.reply(`–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å: <b><i>${text}</i></b>. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å...`, {
            parse_mode: "HTML",
        });
    }

    if (results && results.length > 0 && results.length <= 10) {
        await ctx.react("üëç");
        await ctx.reply(`
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: <b>${results.length}</b>, —Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É: <b><i>${text}</i></b>.`, {
            parse_mode: "HTML",
        });
        results.forEach(async (item) => {
            await ctx.reply(`<blockquote><em>${item.text}</em> \r\n\r\n(${item.book} ${item.chapter}:${item.verse})</blockquote>`, {
                parse_mode: "HTML",
            });
        });
    } else if (results && results.length > 10) {
        await ctx.react("ü§Ø");
        await ctx.reply(`
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: <b>${results.length}</b>, —Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É: <b><i>${text}</i></b>. –≠—Ç–æ –º–Ω–æ–≥–æ–≤–∞—Ç–æ —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —á–∞—Ç.`, {
            parse_mode: "HTML",
        });

        let key = new InlineKeyboard().url('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç...', 'https://justbible.ru/search.html');
        await ctx.reply(`–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –ø–æ–∏—Å–∫–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç "–ü—Ä–æ—Å—Ç–æ –ë–∏–±–ª–∏—è"`, {
            parse_mode: "HTML",
            reply_markup: key,
        });
    } else {
        await ctx.react("ü§î");
        await ctx.reply(`–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ—Ç –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É: <b><i>${text}:</i></b>. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–∫–∞—Ç—å –∏–Ω–∞—á–µ...`, {
            parse_mode: "HTML",
        });
    }
}

bot.callbackQuery(async (ctx) => {
    await ctx.answerCallbackQuery();

});

bot.on(["message:media", "message:file"], async (ctx) => {
    await ctx.reply(`–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é... /start`, {
        parse_mode: "HTML"
    });
});


// –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö 
bot.catch((err) => {
    const ctx = err.ctx;
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${ctx.update.update_id}:`);
    const e = err.error;
    if (e instanceof GrammyError) {
        console.error("–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ:", e.description);
    } else if (e instanceof HttpError) {
        console.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å Telegram:", e);
    } else {
        console.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:", e);
    }
});


bot.start();